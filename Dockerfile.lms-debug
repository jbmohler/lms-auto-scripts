FROM python:3.10 as intermediate
RUN apt-get update
RUN apt-get install -y git

# NOTE:  for docker-build, we pull from git, but the expectation is that the
# git clone directories each get over mounted in the docker run.

# add credentials on build
ARG SSH_PRIVATE_KEY
RUN mkdir /root/.ssh/
RUN echo "${SSH_PRIVATE_KEY}" > /root/.ssh/id_rsa
RUN chmod 600 /root/.ssh/id_rsa

# make sure your domain is accepted
RUN touch /root/.ssh/known_hosts
RUN ssh-keyscan github.com >> /root/.ssh/known_hosts

# cache bust the git clone
ARG CACHE_BUST
RUN echo ${CACHE_BUST}

WORKDIR /lms
RUN git clone --depth 1 git@github.com:jbmohler/yenot.git && \
	rm -rf yenot/.git
RUN git clone git@github.com:jbmohler/yenot-auth.git && \
	rm -rf yenot-auth/.git
RUN git clone git@github.com:jbmohler/yenot-html.git && \
	rm -rf yenot-html/.git
RUN git clone git@github.com:jbmohler/yenot-lmshacc.git && \
	rm -rf yenot-lmshacc/.git
RUN git clone git@github.com:jbmohler/yenot-lmscontacts.git && \
	rm -rf yenot-lmscontacts/.git
RUN git clone git@github.com:jbmohler/yenot-lmsdatabits.git && \
	rm -rf yenot-lmsdatabits/.git

FROM python:3.10

COPY --from=intermediate /lms /lms

RUN python -m pip install --upgrade pip

RUN pip install -r /lms/yenot/requirements.txt
RUN pip install -e /lms/yenot
RUN pip install -r /lms/yenot-auth/requirements.txt
RUN pip install -e /lms/yenot-auth
RUN pip install -e /lms/yenot-html
RUN pip install -e /lms/yenot-lmshacc
RUN pip install -e /lms/yenot-lmscontacts
RUN pip install -e /lms/yenot-lmsdatabits

COPY scripts/lmsyenot.sh /lms
COPY scripts/runsql.py /lms
COPY scripts/create-users.sql /lms
COPY scripts/prepare-database.sql /lms
COPY scripts/init-database.sh /lms

EXPOSE 8088

CMD ["sh", "/lms/lmsyenot.sh"]
